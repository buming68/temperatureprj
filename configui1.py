# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'configui2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# import sys
import os
import serial.tools.list_ports
import configparser
import threading
import re
from myfunctions import *
import winsound
import time
from loguru import logger
timesend_count = 0  # 全局变量，用于发送

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1200, 820)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 820))
        MainWindow.setMaximumSize(QtCore.QSize(1200, 820))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(14)
        MainWindow.setFont(font)
        MainWindow.setWindowOpacity(1.0)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.open_close_button = QtWidgets.QPushButton(self.centralwidget)
        self.open_close_button.setGeometry(QtCore.QRect(30, 60, 171, 31))
        self.open_close_button.setObjectName("open_close_button")
        self.label_com = QtWidgets.QLabel(self.centralwidget)
        self.label_com.setGeometry(QtCore.QRect(30, 20, 61, 21))
        self.label_com.setObjectName("label_com")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(350, 10, 711, 81))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(10)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.serial_COM_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.serial_COM_comboBox.setGeometry(QtCore.QRect(100, 20, 101, 22))
        self.serial_COM_comboBox.setCurrentText("")
        self.serial_COM_comboBox.setObjectName("serial_COM_comboBox")
        self.start_stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_stop_button.setGeometry(QtCore.QRect(230, 20, 93, 28))
        self.start_stop_button.setObjectName("start_stop_button")
        self.clear_button = QtWidgets.QPushButton(self.centralwidget)
        self.clear_button.setGeometry(QtCore.QRect(230, 60, 93, 28))
        self.clear_button.setObjectName("clear_button")
        self.label_1_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1_1.setGeometry(QtCore.QRect(20, 150, 1150, 20))
        self.label_1_1.setObjectName("label_1_1")
        self.spinBox1 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox1.setGeometry(QtCore.QRect(30, 200, 46, 22))
        self.spinBox1.setMinimum(1)
        self.spinBox1.setMaximum(31)
        self.spinBox1.setProperty("value", 30)
        self.spinBox1.setObjectName("spinBox1")
        self.spinBox2 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox2.setGeometry(QtCore.QRect(30, 310, 42, 22))
        self.spinBox2.setMinimum(1)
        self.spinBox2.setMaximum(31)
        self.spinBox2.setProperty("value", 31)
        self.spinBox2.setObjectName("spinBox2")
        self.spinBox5 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox5.setGeometry(QtCore.QRect(30, 640, 42, 22))
        self.spinBox5.setMinimum(1)
        self.spinBox5.setMaximum(31)
        self.spinBox5.setProperty("value", 31)
        self.spinBox5.setObjectName("spinBox5")
        self.label_1_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_1_2.setGeometry(QtCore.QRect(90, 190, 1080, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_1_2.setPalette(palette)
        self.label_1_2.setObjectName("label_1_2")
        self.label_2_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_2_1.setGeometry(QtCore.QRect(20, 240, 1150, 51))
        self.label_2_1.setObjectName("label_2_1")
        self.label_3_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_3_1.setGeometry(QtCore.QRect(20, 350, 1150, 51))
        self.label_3_1.setObjectName("label_3_1")
        self.label_3_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_3_2.setGeometry(QtCore.QRect(90, 415, 1080, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_3_2.setPalette(palette)
        self.label_3_2.setObjectName("label_3_2")
        self.spinBox3 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox3.setGeometry(QtCore.QRect(30, 430, 42, 22))
        self.spinBox3.setMinimum(1)
        self.spinBox3.setMaximum(31)
        self.spinBox3.setProperty("value", 31)
        self.spinBox3.setObjectName("spinBox3")
        self.label_4_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_4_1.setGeometry(QtCore.QRect(20, 480, 1150, 51))
        self.label_4_1.setObjectName("label_4_1")
        self.label_4_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_4_2.setGeometry(QtCore.QRect(90, 530, 1080, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_4_2.setPalette(palette)
        self.label_4_2.setObjectName("label_4_2")
        self.spinBox4 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox4.setGeometry(QtCore.QRect(30, 540, 42, 22))
        self.spinBox4.setMinimum(1)
        self.spinBox4.setMaximum(31)
        self.spinBox4.setProperty("value", 31)
        self.spinBox4.setObjectName("spinBox4")
        self.label_5_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_5_1.setGeometry(QtCore.QRect(20, 580, 1150, 51))
        self.label_5_1.setObjectName("label_5_1")
        self.label_5_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_5_2.setGeometry(QtCore.QRect(90, 630, 1080, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_5_2.setPalette(palette)
        self.label_5_2.setObjectName("label_5_2")
        self.label_6_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_6_2.setGeometry(QtCore.QRect(90, 740, 1080, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_6_2.setPalette(palette)
        self.label_6_2.setObjectName("label_6_2")
        self.spinBox6 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox6.setGeometry(QtCore.QRect(30, 740, 42, 22))
        self.spinBox6.setMinimum(1)
        self.spinBox6.setMaximum(31)
        self.spinBox6.setProperty("value", 31)
        self.spinBox6.setObjectName("spinBox6")
        self.label_6_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_6_1.setGeometry(QtCore.QRect(20, 690, 1150, 51))
        self.label_6_1.setObjectName("label_6_1")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(10, 120, 1011, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(10, 230, 1181, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(10, 345, 1171, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(0, 460, 1191, 16))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(10, 570, 1171, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(0, 680, 1181, 16))
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.settinButton = QtWidgets.QPushButton(self.centralwidget)
        self.settinButton.setGeometry(QtCore.QRect(1070, 10, 101, 81))
        self.settinButton.setObjectName("settinButton")
        self.label_2_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2_2.setGeometry(QtCore.QRect(90, 300, 1080, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_2_2.setPalette(palette)
        self.label_2_2.setObjectName("label_2_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.clear_button.clicked.connect(self.textBrowser.clear) # type: ignore
        self.settinButton.clicked.connect(MainWindow.slot1) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "                                                                                                               多 路 温 湿 度 监 测  ver1.0                                                                      designed by zjjohn    无锡广播电视集团"))
        self.open_close_button.setText(_translate("MainWindow", "打开串口"))
        self.label_com.setText(_translate("MainWindow", "串口"))
        self.start_stop_button.setText(_translate("MainWindow", "开始发送"))
        self.clear_button.setText(_translate("MainWindow", "清除数据"))
        self.label_1_1.setText(_translate("MainWindow", "终端1地址   温度01    温度02    温度03    温度04    温度05    温度06    温度07     温度08     温度09     湿度10 "))
        self.label_1_2.setText(_translate("MainWindow", "     0         0         0        0         0         0         0          0          0         0   "))
        self.label_2_1.setText(_translate("MainWindow", "终端2地址   温度11    温度12    温度13    温度14    温度15    温度16    温度17     温度18     温度19     湿度20 "))
        self.label_3_1.setText(_translate("MainWindow", "终端3地址   温度21    温度2 2   温度23    温度24    温度25    温度26    温度27     温度28     温度29     湿度30 "))
        self.label_3_2.setText(_translate("MainWindow", "     0         0         0        0         0         0         0          0          0         0   "))
        self.label_4_1.setText(_translate("MainWindow", "终端4地址   温度31    温度32    温度33    温度34    温度35    温度36    温度37     温度3 8    温度39     湿度40 "))
        self.label_4_2.setText(_translate("MainWindow", "     0         0         0        0         0         0         0          0          0         0   "))
        self.label_5_1.setText(_translate("MainWindow", "终端5地址   温度41    温度42    温度43    温度44    温度45    温度46    温度47     温度48     温度49     湿度50 "))
        self.label_5_2.setText(_translate("MainWindow", "     0         0         0        0         0         0         0          0          0         0   "))
        self.label_6_2.setText(_translate("MainWindow", "     0         0         0        0         0         0         0          0          0         0   "))
        self.label_6_1.setText(_translate("MainWindow", "终端6地址   温度51    温度52    温度53    温度54    温度55    温度56    温度57     温度58     温度59     湿度60"))
        self.settinButton.setText(_translate("MainWindow", "设置"))
        self.label_2_2.setText(_translate("MainWindow", "     0         0         0        0         0         0         0          0          0         0   "))







        self.open_close_button.clicked.connect(self.open_close_button_handle)  # 绑定开启按钮点击事件
        self.start_stop_button.clicked.connect(self.start_stop_send_handle)  # 绑定开启停止发送按钮事件

        self.textBrowser.document().setMaximumBlockCount(100)  # 设置缺省最大行数，超出前面挤出
        logger.add('mywarn.log', retention='30 days')          # 报警日志文件，保留最近30天

        # palette = QPalette()
        # pix = QPixmap("./mypic.jpg")
        # # pix = pix.scaled(w.width(),w.height())
        # palette.setBrush(QPalette.Background, QBrush(pix))
        # MainWindow.setPalette(palette)

        # 初始化serial对象,用于串口通信
        self.serial = serial.Serial()

        # 串口设置信息 保存和读取
        self.cfg_serial_dic = {}  # 用于保存串口设置信息的字典
        self.current_path = os.path.dirname(os.path.realpath(__file__))  # 当前目录
        self.cfg_path = ''  # 配置文件的路径
        self.cfg_dir = 'settings'  # 配置文件目录
        self.conf_file_name = "cfg.ini"  # 配置文件名
        self.confParse = configparser.ConfigParser()  # 配置文件解析ConfigParser对象
        self.is_serial_open = False  # 串口状态,默认关闭

        self.read_config()

    @staticmethod
    def get_port_list():
        """
        获取当前系统所有COM口
        :return:
        """
        com_list = []  # 用于保存端口名的列表
        port_list = serial.tools.list_ports.comports()  # 获取本机端口，返回list
        for port in port_list:
            com_list.append(port[0])  # 保存端口到列表

        # print(com_list)
        return com_list  # 返回列表

    def read_config(self):
        """
        读取串口配置
        :return:
        """
        self.cfg_path = os.path.join(self.cfg_dir, self.conf_file_name)  # 获取配置文件路径
        # 判断读取配置文件是否正常
        # if self.confParse.read(self.cfg_path, encoding='utf-8'):
        if self.confParse.read(self.cfg_path, encoding='gbk'):

            # 判断读取section是否正常
            try:
                items = self.confParse.items('serial_setting')  # 获取 serial_setting section，返回字典
                self.cfg_serial_dic = dict(items)
                items2 = self.confParse.items('terminal_setting')  # 获取 terminal_setting section，返回字典
                self.cfg_terminal_dic = dict(items2)
                items3 = self.confParse.items('alarm_setting')  # 获取 terminal_setting section，返回字典
                self.cfg_alarm_dic = dict(items3)
                items4 = self.confParse.items('address_setting')  # 获取 terminal_setting section，返回字典
                self.cfg_address_dic = dict(items4)

                # print(self.cfg_serial_dic)
                # print(self.cfg_terminal_dic)
                # print(self.cfg_alarm_dic)
                # print(self.cfg_address_dic)

                self.spinBox1.setProperty("value", self.cfg_terminal_dic["terminal-1"])
                self.spinBox2.setProperty("value", self.cfg_terminal_dic["terminal-2"])
                self.spinBox3.setProperty("value", self.cfg_terminal_dic["terminal-3"])
                self.spinBox4.setProperty("value", self.cfg_terminal_dic["terminal-4"])
                self.spinBox5.setProperty("value", self.cfg_terminal_dic["terminal-5"])
                self.spinBox6.setProperty("value", self.cfg_terminal_dic["terminal-6"])

            # 未找到section
            except configparser.NoSectionError:
                self.confParse.add_section('serial_setting')  # 添加section
                self.confParse.add_section('terminal_setting')  # 添加section2
                self.confParse.add_section('alarm_setting')  # 添加section3
                self.confParse.add_section('address_setting')  # 添加section4
                self.confParse.write(open(self.cfg_path, 'w'))  # 保存到配置文件

        # 异常
        else:
            # 判断目录是否存在,不存在的话新建目录
            if not os.path.exists(self.cfg_dir):
                os.mkdir(self.cfg_dir)
                print("directory not exsist!")

            self.confParse.add_section('serial_setting')  # 添加section
            self.confParse.add_section('terminal_setting')  # 添加section2
            self.confParse.add_section('alarm_setting')  # 添加section3
            self.confParse.add_section('address_setting')  # 添加section4

            self.confParse.set('terminal_setting', 'terminal-1', self.spinBox1.text())
            self.confParse.set('terminal_setting', 'terminal-2', self.spinBox2.text())
            self.confParse.set('terminal_setting', 'terminal-3', self.spinBox3.text())
            self.confParse.set('terminal_setting', 'terminal-4', self.spinBox4.text())
            self.confParse.set('terminal_setting', 'terminal-5', self.spinBox5.text())
            self.confParse.set('terminal_setting', 'terminal-6', self.spinBox6.text())


            self.confParse.write(open(self.cfg_path, 'w'))  # 保存到配置文件

        # 串口设置界面初始化
        # serial_com_label = QLabel(u'串口号')
        self.serial_COM_comboBox.addItems(self.get_port_list())
        self.serial_COM_comboBox.setCurrentText(self.cfg_serial_dic.get('com', 'COM1'))  # 选择默认端口

    def save_config(self):
        """
        保存配置
        :return:
        """

        spinValue1 = self.spinBox1.text()  # 预存可能变化的参数
        spinValue2 = self.spinBox2.text()  # 预存可能变化的参数
        spinValue3 = self.spinBox3.text()  # 预存可能变化的参数
        spinValue4 = self.spinBox4.text()  # 预存可能变化的参数
        spinValue5 = self.spinBox5.text()  # 预存可能变化的参数
        spinValue6 = self.spinBox6.text()  # 预存可能变化的参数

        self.read_config()                                         #读取包括setting页面已经更改的参数

        self.serial_COM_comboBox.setCurrentText(self.serial.port)  # 只需要更改几个端口的参数
        self.spinBox1.setProperty("value", spinValue1)  # 将预存的参数恢复
        self.spinBox2.setProperty("value", spinValue2)  # 将预存的参数恢复
        self.spinBox3.setProperty("value", spinValue3)  # 将预存的参数恢复
        self.spinBox4.setProperty("value", spinValue4)  # 将预存的参数恢复
        self.spinBox5.setProperty("value", spinValue5)  # 将预存的参数恢复
        self.spinBox6.setProperty("value", spinValue6)  # 将预存的参数恢复


        self.get_serial_setting()
        self.confParse.set('serial_setting', 'com', self.serial.port)
        self.confParse.set('serial_setting', 'baudRate', str(self.serial.baudrate))
        self.confParse.set('serial_setting', 'data', str(self.serial.bytesize))
        self.confParse.set('serial_setting', 'stopBits', str(self.serial.stopbits))
        self.confParse.set('serial_setting', 'parity', self.serial.parity)

        self.confParse.set('terminal_setting', 'terminal-1', self.spinBox1.text())
        self.confParse.set('terminal_setting', 'terminal-2', self.spinBox2.text())
        self.confParse.set('terminal_setting', 'terminal-3', self.spinBox3.text())
        self.confParse.set('terminal_setting', 'terminal-4', self.spinBox4.text())
        self.confParse.set('terminal_setting', 'terminal-5', self.spinBox5.text())
        self.confParse.set('terminal_setting', 'terminal-6', self.spinBox6.text())

        self.confParse.write(open(self.cfg_path, 'w'))



    def get_serial_setting(self):
        """
        读取串口配置信息
        :return:
        """
        self.serial.port = self.serial_COM_comboBox.currentText()
        # self.serial.baudrate = int(self.serial_baudRate_comboBox.currentText())
        # self.serial.bytesize = int(self.serial_data_comboBox.currentText())
        # self.serial.stopbits = int(self.serial_stopBits_comboBox.currentText())
        # self.serial.parity = self.serial_parity_comboBox.currentText()
        self.serial.timeout = 0

    def open_serial(self):
        """
            打开串口
            :return:
        """
        # 获取当前串口设置信息,并保存
        self.get_serial_setting()
        self.save_config()

        # 打开串口
        try:
            self.serial.open()
            # self.t = serial.Serial(self.serial.port, 9600, timeout=0.5)  # 发送给DTU的通讯口，0.5秒超时
        except serial.SerialException:
            pass
            # QMessageBox.critical(self, "Critical", "无法打开串口！！")  # 打开失败，弹窗提示
        else:
            self.is_serial_open = True  # 更新串口状态
            self.open_close_button.setText(u'关闭串口')  # 更新按钮名称

            self.enable_serial_setting(False)  # 设置串口设置界面为不可修改

    def close_serial(self):
        """
            关闭串口
            :return:
        """
        # 更新串口状态
        self.is_serial_open = False
        self.open_close_button.setText(u'打开串口')  # 更新串口打开按钮名称
        self.enable_serial_setting(True)  # 设置串口设置界面为可修改
        # self.serial_close_callback()  # 调用串口关闭回调
        self.serial.close()  # 关闭串口
        self.stop_send()  # 停止发送命令到串口

        self.save_config()

    def open_close_button_handle(self):
        """
        处理打开或关闭串口按键事件
        :return:
        """
        # 判断串口是否已打开,没打开的话打开,打开的话关闭
        if self.is_serial_open:
            self.close_serial()
            print("com open")
        else:
            self.open_serial()
            print("com close")

    def enable_serial_setting(self, enable):
        """
        使能串口设置组件和刷新串口组件
        :param enable: bool ,True: enable,False: disable
        :return:
        """
        self.serial_COM_comboBox.setEnabled(enable)

    def serial_readline(self):
        """
        读取一行,串口已打开则返回读取的内容，否则返回空字符串
        :return str:
        """
        if self.is_serial_open:
            try:
                text_line = self.serial.readline()
            except Exception as e:
                print(e)
                self.close_serial()
            else:
                return text_line.decode("utf-8", "ignore")
        else:
            return ""

    def serial_write(self, data):
        """
        串口发送字符串
        :param data 待发送的字符串str:
        :return:
        """
        if self.is_serial_open:
            try:
                self.serial.write(data.encode("utf-8", "ignore"))
            except Exception as e:
                print(e)

    def start_stop_send_handle(self):
        print("start stop clicked")
        # msg_box = QMessageBox(QMessageBox.Warning, "错误提示", "弹出窗口测试")
        # msg_box = QMessageBox(QMessageBox.Information , "错误提示", "弹出窗口测试")
        # msg_box.exec_()

        # print(time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()))

        if (self.start_stop_button.text()) == "开始发送":
            # self.serial_write("start stop clicked")
            self.start_send()
        else:
            self.stop_send()

    def start_send(self):
        print(self.start_stop_button.text())

        self.read_config()

        self.start_stop_button.setText("停止发送")

        self.createTimer()  # 开启定时器
        print("定时器开启！！")

    def stop_send(self):
        print(self.start_stop_button.text())
        # self.save_config()

        self.start_stop_button.setText("开始发送")
        self.label_1_2.setText("")
        self.label_2_2.setText("")
        self.label_3_2.setText("")
        self.label_4_2.setText("")
        self.label_5_2.setText("")
        self.label_6_2.setText("")

        # save_config()
        try:
            self.timer1.cancel()  # 关闭定时器

            print("定时器关闭成功！！")
            # save_config()
        except Exception:
            print("定时器无需或无法关闭")

    def createTimer(self):
        self.timer1 = threading.Timer(1, self.repeat_fun)
        self.timer1.start()

    def get_active_spinbox_group(self):
        self.spinbox_group_num_active = [0] * 6
        self.spinbox_group_chanel_active = [10] * 6
        self.spinbox_group_count = 0
        spinbox_group_num = [0] * 6
        spinbox_group_num[0] = int(self.spinBox1.text())
        spinbox_group_num[1] = int(self.spinBox2.text())
        spinbox_group_num[2] = int(self.spinBox3.text())
        spinbox_group_num[3] = int(self.spinBox4.text())
        spinbox_group_num[4] = int(self.spinBox5.text())
        spinbox_group_num[5] = int(self.spinBox6.text())

        for i in range(0, 6):
            if (spinbox_group_num[i] != 31):
                self.spinbox_group_num_active[self.spinbox_group_count] = spinbox_group_num[i]
                # if i>3:
                #     self.spinbox_group_chanel_active[self.spinbox_group_count] = 2
                self.spinbox_group_count = self.spinbox_group_count + 1

        # for i in range(0, self.spinbox_group_count):
        #     print(self.spinbox_group_num_active[i],  self.spinbox_group_chanel_active[i])

    def repeat_fun(self):
        global timesend_count

        if (self.start_stop_button.text()) == "开始发送":
            # self.serial_write("start stop clicked")
            self.stop_send()
            self.timer1.cancel()
            return 0
        # print(self.start_stop_button.text())

        """
        定时接收串口的数据
        """
        try:
            num = self.serial.inWaiting()  # 等待接收串口缓冲区中的数据
        except Exception:
            num = 0
            # var3.set("串口通讯异常")
        if num > 6:  # 接收到数据，数量
            recedata = self.serial.read(num)  # 清除接收数据，无需判断接收数据

            # print(recedata)
            text_list = re.findall(".{2}", recedata.hex())  # 收到的温度数据
            new_text = " ".join(text_list)

            #self.textBrowser.append("<font color = \"#000000\">" + new_text)

            # 处理接收到的字符串
            received_data_number = int(text_list[2], 16) + 2
            labelstring = ""

            # print(int(text_list[2], 16),received_data_number)
            try:
                self.terminalID = 0
                if (self.spinBox1.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                    self.terminalID = 1
                if (self.spinBox2.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                    self.terminalID = 2
                if (self.spinBox3.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                    self.terminalID = 3
                if (self.spinBox4.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                    self.terminalID = 4
                if (self.spinBox5.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                    self.terminalID = 5
                if (self.spinBox6.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                    self.terminalID = 6

                # print(self.terminalID)

                if (self.terminalID != 0):
                    for i in range(3, received_data_number, 2):
                        temp_int = (int(text_list[i], 16) * 256 + int(text_list[i + 1], 16)) / 10
                        alarm_int = int(self.cfg_alarm_dic[str(self.terminalID) + str(int((i - 3) / 2))])

                        # print(temp_int, alarm_int)

                        if (temp_int > alarm_int):
                            winsound.Beep(600, 300)

                            alarm_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()) + "    "
                            address_string = self.cfg_address_dic[
                                                 'a' + str(self.terminalID) + str(int((i - 3) / 2))] + "超标 " + str(
                                temp_int)
                            self.textBrowser.append("<font color = \"#FF0000\">" + alarm_time + address_string)
                            # print(address_string)

                            logger.warning(address_string)

                        if (temp_int == 0):
                            labelstring = labelstring + "          "
                        else:
                            labelstring = labelstring + "      " + str(temp_int)
                    labelstring = labelstring + "%"
            except:
                print("接收数据异常！！！")
                self.createTimer()
                return 0

            if (self.spinBox1.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                self.label_1_2.setText(labelstring)
            if (self.spinBox2.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                self.label_2_2.setText(labelstring)
            if (self.spinBox3.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                self.label_3_2.setText(labelstring)
            if (self.spinBox4.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                self.label_4_2.setText(labelstring)
            if (self.spinBox5.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                self.label_5_2.setText(labelstring)
            if (self.spinBox6.text() == str(int(text_list[0], 16))):  # 如果符合，则更改界面的显示
                self.label_6_2.setText(labelstring)

        """
        获取可以发送命令的485终端地址
        """
        self.get_active_spinbox_group()
        # print("------------------------------", self.spinbox_group_count, timesend_count)

        """
        定时发送命令至串口
        """
        if (self.is_serial_open == 0):  # 判断串口打开
            print("串口关闭，无法发送")  # 提示打开串口
            self.stop_send()
            return 1

        try:
            # 终端地址，传感器数量10（或2）
            command_lunxun8 = Str_lunxun(self.spinbox_group_num_active[timesend_count],
                                         self.spinbox_group_chanel_active[timesend_count])  # 终端地址，传感器数量10（或2）
            print(command_lunxun8)
            self.serial.write(bytes.fromhex(command_lunxun8))
        except:
            print("发送数据异常-----》》》》")
            timesend_count = 0
            self.createTimer()
            return 0

        timesend_count = timesend_count + 1  # 轮巡计数变量
        if (timesend_count == self.spinbox_group_count):
            timesend_count = 0

        self.createTimer()




